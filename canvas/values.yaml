# Default values for canvas.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

image:
  repository: public.ecr.aws/atomicjolt/canvas-lms
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  # tag: latest
  # preDeployTag: latest
  # If set, the preDeployTag is used in pre-deploy migrations, otherwise
  # pre-deploy migrations use the same tag as everything else.

imagePullSecrets: []
nameOverride: ""
fullnameOverride: "canvas"

configSecret: "canvas-secrets"
externalSecret:
  enabled: false
  spec:
    backendType: systemManager
    data: []
externalSecretRedis:
  enabled: false
  name: redis
  spec:
    backendType: systemManager
    data: []

app:
  replicaCount: 1
  terminationGracePeriodSeconds: 75
  env:
    -name: PASSENGER_MAX_POOL_SIZE
     value: "12"
    -name: PASSENGER_MAX_REQUEST_QUEUE_SIZE
     value: "200"
    -name: PASSENGER_MIN_INSTANCES
     value: "6"
    -name: PASSENGER_MAX_REQUESTS
     value: "2000"
    -name: PASSENGER_STARTUP_TIMEOUT
     value: "180"
    -name: NGINX_MAX_UPLOAD_SIZE
     value: "10g"
    -name: APP_DOMAIN
     value: "canvas"
  lifecycle: {}
  resources: {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi
  autoscaling:
    enabled: false
    # minReplicas: 1
    maxReplicas: 10
    metrics: {}
      # - type: Resource
      #   resource:
      #     name: cpu
      #     target:
      #       type: Utilization
      #       averageUtilization: 80
      # - type: Resource
      #   resource:
      #     name: memory
      #     target:
      #       type: Utilization
      #       averageUtilization: 80
    behavior: {}
      # scaleUp:
      #   stabilizationWindowSeconds: 0
      #   policies:
      #   - type: Percent
      #     value: 100
      #     periodSeconds: 15
      #   - type: Pods
      #     value: 4
      #     periodSeconds: 15
      #   selectPolicy: Max
      # scaleDown:
      #   stabilizationWindowSeconds: 300
      #   policies:
      #   - type: Percent
      #     value: 10
      #     periodSeconds: 60
      #   - type: Pods
      #     value: 1
      #     periodSeconds: 60
      #   selectPolicy: Min

worker:
  replicaCount: 1
  extraArgs: []
  terminationGracePeriodSeconds: 30
  env: {}
  lifecycle: {}
  resources: {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi
  autoscaling:
    enabled: false
    # minReplicas: 1
    maxReplicas: 10
    metrics: {}
      # - type: Resource
      #   resource:
      #     name: cpu
      #     target:
      #       type: Utilization
      #       averageUtilization: 80
      # - type: Resource
      #   resource:
      #     name: memory
      #     target:
      #       type: Utilization
      #       averageUtilization: 80
    behavior: {}
      # scaleUp:
      #   stabilizationWindowSeconds: 0
      #   policies:
      #   - type: Percent
      #     value: 100
      #     periodSeconds: 15
      #   - type: Pods
      #     value: 4
      #     periodSeconds: 15
      #   selectPolicy: Max
      # scaleDown:
      #   stabilizationWindowSeconds: 300
      #   policies:
      #   - type: Percent
      #     value: 10
      #     periodSeconds: 60
      #   - type: Pods
      #     value: 1
      #     periodSeconds: 60
      #   selectPolicy: Min

migration:
  resources: {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

topologySpreadConstraint:
  enabled: false
  maxSkew: 1
  topologyKey: kubernetes.io/hostname
  whenUnsatisfiable: DoNotSchedule

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  # ingressClassName: default
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
      - path: /
        backend:
          serviceName: chart-example.local
          servicePort: 80
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}

persistence:
  # storageClassName: default
  size: 10Gi
  # annotations: {}
  finalizers:
    - kubernetes.io/pvc-protection
  # selectorLabels: {}

scheduledScaling:
  # requires autoscaler to be enabled
  # all times are UTC
  enabled: false
  image:
    repository: bitnami/kubectl
    tag: 1.22
  cronjobs: []
    # - name: scale-up
    #   schedule: "0 11 * * 1-5"
    #   workerMinReplicas: 1
    #   appMinReplicas: 2
    # - name: scale-down
    #   schedule: "0 23 * * 1-5"
    #   workerMinReplicas: 1
    #   appMinReplicas: 1

metrics:
  prometheusExporter:
    enabled: false
    repository: prom/statsd-exporter
    tag: v0.22.4
    pullPolicy: IfNotPresent
    resources: {}
  serviceMonitor:
    enabled: false
    additionalLabels: {}
    scrapeInterval: 30s

canvas-rce-api:
  enabled: true
  image:
    #tag: latest
  fullnameOverride: "canvas-rce-api"
  service:
    type: ClusterIP
    port: 80

  externalSecret:
    enabled: false
    spec:
      backendType: systemManager
      data: []

  replicaCount: 1
  metrics:
    prometheusExporter:
      enabled: true
    serviceMonitor:
      enabled: true

redis:
  enabled: true
  architecture: standalone

  commonConfiguration: |-
    maxmemory 50mb
    maxmemory-policy allkeys-lru
    save ""

  auth:
    sentinel: false
    existingSecret: redis
    existingSecretPasswordKey: redis-password
    usePasswordFiles: true
  master:
    resources:
      requests:
        memory: 100Mi
      limits:
        memory: 200Mi
    disableCommands:
      # TODO
    persistence:
      enabled: false
  replica:
    replicaCount: 0
    disableCommands:
      # TODO
    persistence:
      enabled: false
  metrics:
    enabled: true

s3mail:
  enabled: false
  image:
    registry: docker.io
    repository: amazon/aws-cli
    tag: "2.8.0"
    pullPolicy: IfNotPresent

  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: "ses-s3mail"
  imagePullSecrets: []
  nameOverride: ""
  fullnameOverride: "s3mail"
  terminationGracePeriodSeconds: 30
  # Default AWS Region is us-east-1
  awsRegion: "us-east-1"
  sesBucket: ""
  lifecycle: {}
  resources: {}
    # requests:
    #   cpu: 100m
    #   memory: 1Gi
